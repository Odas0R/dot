priority -50

snippet fun "function (named)" b
function ${1:function_name} (${2:argument}) {
	${VISUAL}$0
};
endsnippet

snippet vf "function (assigned to var)"
${1:const }${2:function_name} = ($3) => {
	${VISUAL}$0
};
endsnippet

snippet timeout "setTimeout function"
setTimeout(function () {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}) {
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${VISUAL}$0
} else {
	${2}
}
endsnippet

snippet try "try-catch" b
try {
	$0
} catch(error) {
	
}
endsnippet

snippet switch
switch (${VISUAL}${1:expression}) {
	case '${VISUAL}${2:case}':
		${3}
		break
	${4}
	default:
		${5}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${VISUAL}${1:case}':
	${VISUAL}$0;
	break
endsnippet

# vim:ft=snippets:
