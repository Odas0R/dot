let mapleader = ","

set autoindent " automatically indent new lines
set autowrite " automatically write files when changing when multiple files open
set nonumber " activate line numbers
set norelativenumber " Remove line number relative
set noruler " Remove line and column number of the cursor position
set cmdheight=2 " Number of screen lines to use for the command-line.
set updatetime=100 " If nothing was written in the buffer after 100ms
set noshowmode " remove vim default showing mode, using lightline

set tabstop=2
set textwidth=72
set softtabstop=2
set shiftwidth=2
set laststatus=2
set smartindent
set smarttab

set expandtab " replace tabs with spaces automatically
set nofixendofline " Stop vim from adding \n to the end of the line
set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|> " better ascii friendly listchars for spaces
set foldmethod=manual " don't fold
match ErrorMsg '\s\+$' " mark trailing spaces as errors

set nobackup " not secure but needed
set noswapfile " not secure but needed
set nowritebackup " not secure but needed

set icon

" Theme
set termguicolors
set background=dark

" highlight search hits: ,+<cr> to clear
set hlsearch
set incsearch
set linebreak
nnoremap <silent> <C-L> :nohl<CR><C-L>

set shortmess=aoOtI " avoid most of the 'Hit Enter ...' messages
set hidden " stop complaints about switching buffer with changes
set history=1000 " command history
set ttyfast " faster scrolling

syntax enable " plugins and stuff need it

filetype plugin on " allow sensing the filetype
filetype indent on " allow identing based on filetype
set omnifunc=syntaxcomplete#Complete

" Search
set wildignore+=**/node_modules/**
set wildmenu

" tab on visual selection
vmap <Tab> >gv
vmap <S-Tab> <gv

set complete+=kspell " Spelling on autocomplete
set completeopt=menuone,longest " Config of vim autocomplete panel
set shortmess+=c " Remove the autocomplete status bar

" Return to last edit position when opening files
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Map alternatives the <ESC> key
inoremap jj <Esc>
cnoremap jj <Esc>
inoremap kk <Esc>
cnoremap kk <Esc>
inoremap kj <Esc>
cnoremap kj <Esc>

" saving the file
nnoremap <leader>q :wq<cr>
nnoremap <leader>w :w<cr>
nnoremap <C-s> :w<cr>
inoremap <C-s> <esc>:w<cr>

" disable arrow keys
noremap <up> :echoerr "use k instead"<cr>
noremap <down> :echoerr "use j instead"<cr>
noremap <left> :echoerr "use h instead"<cr>
noremap <right> :echoerr "use l instead"<cr>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>

call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
Plug 'mattn/emmet-vim'
Plug 'yuezk/vim-js'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'Shougo/vimfiler.vim'
Plug 'Shougo/unite.vim'
Plug 'tpope/vim-eunuch' " Commands to Move, Rename, Delete files
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'Raimondi/delimitMate'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-commentary'
Plug 'junegunn/goyo.vim'
Plug 'vitalk/vim-simple-todo' " TODO: Create your own plugin

call plug#end()

" theme
"
" https://github.com/morhetz/gruvbox
"
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_italic=1

" lightline
"
" https://github.com/itchyny/lightline.vim
"
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch' ],
      \             [ 'readonly', 'filename', 'modified' ] ],
      \ }
      \ }

" Emmet
"
" https://github.com/mattn/emmet-vim
"
let g:user_emmet_expandabbr_key='<cr>'
let g:user_emmet_install_global = 0
autocmd FileType html,typescriptreact,javascriptreact EmmetInstall

" shfmt - bash formatter
"
" https://github.com/mvdan/sh
"
let g:shfmt_fmt_on_save = 1
let g:shfmt_extra_args = '-i 2' " spaces

" Golang
"
" https://github.com/fatih/vim-go
"
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = 'goimports'
let g:go_fmt_autosave = 1
let g:go_gopls_enabled = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 0
"let g:go_metalinter_command='golangci-lint'
let g:go_metalinter_command='golint'
let g:go_metalinter_autosave=1
"let g:go_gopls_analyses = { 'composites' : v:false }
au FileType go nmap <leader>t :GoTest!<CR>
au FileType go nmap <leader>v :GoVet!<CR>
au FileType go nmap <leader>b :GoBuild!<CR>
au FileType go nmap <leader>c :GoCoverageToggle<CR>
au FileType go nmap <leader>i :GoInfo<CR>
au FileType go nmap <leader>l :GoMetaLinter!<CR>

" Vim Markdown
"
" https://github.com/plasticboy/vim-markdown
"
" Useful Tips:
" - Use :Goyo to read your notes
"

let g:vim_markdown_no_extensions_in_markdown = 1 " open links in with gx in every file
let g:vim_markdown_autowrite = 1 " auto save
let g:vim_markdown_folding_disabled = 1 " remove markdown folding

au FileType markdown setlocal conceallevel=2 " add conceallevel 2 on markdown files
" auto format on file save
au FileType markdown nnoremap <leader>f gggqG :w<cr>
au FileType markdown inoremap <leader>f <esc> gggqG :w<cr>
" bindings to add italics & bold
autocmd FileType markdown inoremap <C-b> ****<left><left>
autocmd FileType markdown inoremap <C-i> **<left>

let g:vim_markdown_new_list_item_indent = 0 " remove new list indetation"
let g:vim_markdown_edit_url_in = 'current' " open a new .md file on the current view
let g:netrw_browsex_viewer="cmd.exe /C start" " open the link on the default browser

" Add colors to the markdown syntax
highlight htmlBold gui=bold guifg=#fb4934 ctermfg=124
highlight htmlItalic gui=italic guifg=#ff8700 ctermfg=214


" VimFiler
"
" https://github.com/Shougo/vimfiler.vim/blob/master/doc/vimfiler.txt
"
let g:vimfiler_as_default_explorer = 1

" Toggle VimFiler with '\'
nnoremap \ :VimFilerExplorer<CR>
autocmd FileType vimfiler nmap <buffer> \ <Plug>(vimfiler_close)


" FZF
"
" https://github.com/junegunn/fzf.vim
"
let g:fzf_preview_window = ['right:60%:wrap', 'ctrl-/']

" command to show fzf
nnoremap <C-p> :GFiles<cr>

" preview window git files
command! -bang -nargs=? -complete=dir GFiles
      \ call fzf#vim#gitfiles(
      \ <q-args>,
      \ fzf#vim#with_preview(
      \   {'options': ['--layout=reverse', '--info=inline']}
      \ ), <bang>1)

" preview window files
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(
      \ <q-args>,
      \ fzf#vim#with_preview(
      \   {'options': ['--layout=reverse', '--info=inline']}
      \ ), <bang>1)

" Vim Commentary
"
" https://github.com/tpope/vim-commentary
"
