let skip_defaults_vim=1
set nocompatible                                                  " use VIM as Vi

set autowrite                                                     " automatically write files when changing when multiple files open
set relativenumber
set ruler                                                         " turn col and row position on in bottom right
set showmode                                                      " show command and insert mode
set showcmd                                                       " show command on the right side (leader key)

set textwidth=72                                                  " enough for line numbers + gutter within 80 standard
set tabstop=2                                                     " number of spaces that a <Tab> has
set shiftwidth=2                                                  " number of spaces on indentation
set softtabstop=2                                                 " read :help ðŸ˜‚
set numberwidth=2
set smartindent
set autoindent                                                    " automatically indent new lines
set smarttab

set expandtab                                                     " replace tabs /w spaces
set nofixendofline                                                " stop vim from adding \n to files
set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|> " better ascii friendly list chars

set foldmethod=manual                                             " no folding
set nofoldenable                                                  " no folding

set icon

match ErrorMsg '\s\+$'                                            " mark trailing spaces as errors
set shortmess=aoOtTI                                              " avoid most of the 'Hit Enter ...' messages
set viminfo='20,<1000,s1000                                       " prevents truncated yanks, deletes, etc.
set omnifunc=syntaxcomplete#Complete                              " enable omni-completion

set path+=**
set wildmenu                                                      " better command-line completion
set wildignore+=**/node_modules/**                                " ignore node_modules

syntax on                                                         " syntax for plugins etc
filetype plugin on                                                " allow sensing the file type
set ttyfast                                                       " faster scrolling

set hidden                                                        " stop complaints about switching buffer with changes
set history=100                                                   " command history

" highlight search hits
set hlsearch
set incsearch
set linebreak
nnoremap <C-l> :nohl<CR><C-l>

" more risky, but cleaner
set nobackup
set noswapfile
set nowritebackup

set complete+=kspell                                              " spelling on autocomplete
set completeopt=menuone,longest                                   " config of vim autocomplete panel
set shortmess+=c                                                  " remove the autocomplete status bar

" not bracket matching or folding
let g:loaded_matchparen=1
set noshowmatch

" add portuguese dictionary
set spelllang+=pt_pt

" Return to last edit position when opening files
au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

" ============================================================
" Custom Settings per FileType
" ============================================================

au FileType markdown setlocal conceallevel=2 spell nonumber

" ============================================================
" Quickfix, Better Grep
" ============================================================

set grepprg=rg\ -S\ --vimgrep
set grepformat^=%f:%l:%c:%m
augroup autoquickfix
	autocmd!
	autocmd QuickFixCmdPost [^l]* cwindow
	autocmd QuickFixCmdPost    l* lwindow
augroup END

" ============================================================
" Netrw, defaults & mappings
" ============================================================

nnoremap \ :Lexplore<CR>
let g:netrw_browsex_viewer="cmd.exe /C start"
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 100
let g:netrw_keepdir = 0
let g:netrw_list_hide = &wildignore
function! NetrwMappings()
	" Go down a directory / open file
	nmap <buffer> l <CR>
	" Close the preview window
	nmap <buffer> P <C-w>z
	" Focus on file and close netrw
	nmap <buffer> L <CR>:Lexplore<CR>
endfunction
autocmd FileType netrw call NetrwMappings()

" ============================================================
" Bindings
" ============================================================

let mapleader = ","

nnoremap <leader>vu :so $HOME/.vimrc<CR>
nnoremap <leader>ve :e $HOME/.vimrc<CR>
nnoremap <leader>ce :silent !code %<CR>:redraw!<CR>

" tab on visual selected
vmap <Tab> >gv
vmap <S-Tab> <gv

" save like an IDE BAD HABITSSSSSSSSSS
nnoremap <C-s> :w<CR>
inoremap <C-s> <esc>:w<CR>a

" <F NUM> Mappings
nnoremap <F1> :set number!<CR>
nnoremap <F2> :set spell!<CR>
nnoremap <leader>2 :set paste<CR>

" Linters <F3> -- make the mapping local to the <buffer> ðŸ˜¯
au FileType bash,sh nnoremap <buffer> <F3> :w<CR>:!clear && shellcheck %<CR>
au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab | nnoremap <buffer> <F3> :w<CR>:!clear && yamllint %<CR>
" au FileType sql nnoremap <buffer> <F3> :w<CR>:!clear && squawk %<CR>


" Run Code <F4>
au FileType sh nnoremap <buffer> <F4> :w<CR>:!clear && sh %<CR>
au FileType bash nnoremap <buffer> <F4> :w<CR>:!clear && bash %<CR>

" ============================================================
" Commands (Useful for file managing, etc)
"
" Useful: https://dev.to/dlains/create-your-own-vim-commands-415b
" ============================================================

command! -complete=file -nargs=1 -bar Remove :call delete(expand(<f-args>)) | bd #
command! -complete=file -nargs=1 Rename try | saveas <args> | call delete(expand('#')) | bd # | endtry

" ============================================================
" Formatters (using vim-autoformat, does a lot of work for me)
" ============================================================

" this is complete sorcery, I managed to force consistent cursor
" placement on format.
" PS: The try-catch is to supress the undojoin error when you :w
" fun! s:HtmlFormat()
"   try
"     let l:pos = getcurpos()
"     silent execute 'undojoin'
"     silent execute '%!js-beautify --type html -s 2'
"     call setpos('.', l:pos)
"   catch
"   endtry
" endfun

fun! s:Shfmt()
	try
		let l:pos = getcurpos()
		silent execute 'undojoin'
		silent execute '%!shfmt -i 2'
		call setpos('.', l:pos)
	catch
	endtry
endfun

fun! s:Format()
	let search = @/
	let cursor_position = getpos('.')
	normal! H
	let window_position = getpos('.')
	call setpos('.', cursor_position)
	silent execute 'normal gg=G'
	let @/ = search
	call setpos('.', window_position)
	normal! zt
	call setpos('.', cursor_position)
endfun

au FileType vim au BufWritePre <buffer> call s:Format()
au FileType sh,bash au BufWritePre <buffer> call s:Shfmt()
" au FileType html au BufWritePre <buffer> call s:HtmlFormat()
" au FileType yaml au BufWritePre <buffer> call s:Format()

" ==========================================================
" Plugins
" ==========================================================

call plug#begin()

Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'vitalk/vim-simple-todo'
Plug 'vim-airline/vim-airline'
" copy text to the system clipboard from anywhere using the ANSI OSC52 sequence.
Plug 'ojroques/vim-oscyank'

call plug#end()

" colorscheme
set t_Co=256
colorscheme onehalfdark
let g:airline_theme='onehalfdark'

if exists('+termguicolors')
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
	set termguicolors
endif

" tabnine
set rtp+=~/.vim/tabnine-vim

" OSCYankReg MAGIC âœ¨
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname  is '' | OSCYankReg " | endif

" ==========================================================
" Color Overrides
" ==========================================================

au FileType * hi SpellBad guifg=white guibg=lightred
au FileType * hi Error guifg=white guibg=lightred
au FileType * hi ErrorMsg guifg=white guibg=lightred

au FileType markdown,pandoc hi Title cterm=bold ctermfg=magenta ctermbg=NONE
au FileType markdown,pandoc hi htmlBold cterm=bold ctermfg=blue ctermbg=NONE
au FileType markdown,pandoc hi htmlItalic cterm=italic ctermfg=yellow ctermbg=NONE
au FileType markdown,pandoc hi htmlLink ctermfg=cyan guifg=cyan cterm=underline gui=underline ctermbg=NONE

