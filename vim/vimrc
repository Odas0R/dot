let mapleader = ","

set autoindent " automatically indent new lines
set autowrite " automatically write files when changing when multiple files open
set nonumber " activate line numbers
set norelativenumber " Remove line number relative
set noruler " Remove line and column number of the cursor position
set cmdheight=2 " Number of screen lines to use for the command-line.
set updatetime=100 " If nothing was written in the buffer after 100ms
set noshowmode " remove vim default showing mode, using lightline
set clipboard=unnamed

set tabstop=2
set textwidth=72
set softtabstop=2
set shiftwidth=2
set laststatus=2
set numberwidth=2
set smartindent
set smarttab

set expandtab " replace tabs with spaces automatically
set nofixendofline " Stop vim from adding \n to the end of the line
set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|> " better ascii friendly listchars for spaces
set foldmethod=manual " don't fold
match ErrorMsg '\s\+$' " mark trailing spaces as errors

set nobackup " not secure but needed
set noswapfile " not secure but needed
set nowritebackup " not secure but needed

set icon

" Theme
set termguicolors
set background=dark

" highlight search hits: ,+<cr> to clear
set hlsearch
set incsearch
set linebreak
nnoremap <silent> <C-L> :nohl<CR><C-L>

set shortmess=aoOtI " avoid most of the 'Hit Enter ...' messages
set hidden " stop complaints about switching buffer with changes
set history=1000 " command history
set ttyfast " faster scrolling

syntax enable " plugins and stuff need it

filetype plugin on " allow sensing the filetype
filetype indent on " allow identing based on filetype
set omnifunc=syntaxcomplete#Complete

" Search
set wildignore+=**/node_modules/**
set wildmenu

" tab on visual selection
vmap <Tab> >gv
vmap <S-Tab> <gv

set complete+=kspell " Spelling on autocomplete
set completeopt=menuone,longest " Config of vim autocomplete panel
set shortmess+=c " Remove the autocomplete status bar

" Return to last edit position when opening files
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" saving the file
nnoremap <C-s> :w<cr>
inoremap <C-s> <esc>:w<cr>a

" disable arrow keys
noremap <up> :echoerr "use k instead"<cr>
noremap <down> :echoerr "use j instead"<cr>
noremap <left> :echoerr "use h instead"<cr>
noremap <right> :echoerr "use l instead"<cr>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>

call plug#begin('~/.vim/plugged')

Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'Raimondi/delimitMate'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-commentary'
Plug 'junegunn/goyo.vim'
Plug 'vitalk/vim-simple-todo' " TODO: Create your own plugin
Plug 'roxma/vim-tmux-clipboard'
Plug 'skywind3000/asyncrun.vim'

call plug#end()

" Theme
"
" https://github.com/morhetz/gruvbox
"
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_italic=1

" shfmt - bash formatter
"
" https://github.com/mvdan/sh
"
let g:shfmt_fmt_on_save = 1
let g:shfmt_extra_args = '-i 2' " spaces

" Asyncrun
"
" https://github.com/skywind3000/asyncrun.vim
"
let g:asyncrun_status = ''
" let g:asyncrun_shell = '/bin/bash'
let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

" open asyncrun panel when text is added to it
augroup vimrc
    autocmd QuickFixCmdPost * call asyncrun#quickfix_toggle(8, 1)
augroup END

" toggle asyncrun panel
noremap <F9> :call asyncrun#quickfix_toggle(8)<cr>

" Linters
"
" Example to spawn a terminal:
" au FileType sh autocmd BufWritePost * :AsyncRun -mode=term -pos=bottom -rows=10 shellcheck "$(VIM_FILEPATH)"
"
" POSIX linter
au FileType sh autocmd BufWritePost * :AsyncRun shellcheck %

" Vim Markdown
"
" https://github.com/plasticboy/vim-markdown
"
" Useful Tips:
" - Use :Goyo to read your notes
"
let g:vim_markdown_no_extensions_in_markdown = 1 " open links in with gx in every file
let g:vim_markdown_autowrite = 1 " auto save
let g:vim_markdown_folding_disabled = 1 " remove markdown folding

au FileType markdown setlocal conceallevel=2 " add conceallevel 2 on markdown files

" auto format on file save
au FileType markdown nnoremap <leader>f gggqG :w<cr>
au FileType markdown inoremap <leader>f <esc> gggqG :w<cr>

" bindings to add bold
autocmd FileType markdown inoremap <C-b> ****<left><left>

let g:vim_markdown_new_list_item_indent = 0 " remove new list indetation"
let g:vim_markdown_edit_url_in = 'current' " open a new .md file on the current view
let g:netrw_browsex_viewer="cmd.exe /C start" " open the link on the default browser

" Add colors to some syntax
highlight htmlBold gui=bold guifg=#fb4934 ctermfg=124
highlight htmlItalic gui=italic guifg=#ff8700 ctermfg=214
highlight SpellBad ctermbg=red ctermfg=white
