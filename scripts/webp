#!/bin/bash

# check if ffmpeg is installed
if ! command -v ffmpeg &>/dev/null; then
  echo "FFmpeg is not installed. Please install FFmpeg and try again."
  exit 1
fi

# check if GNU Parallel is installed
if ! command -v parallel &>/dev/null; then
  echo "GNU Parallel is not installed. Please install GNU Parallel and try again."
  exit 1
fi

# Initialize variables
quality=80
files=()

# Parse arguments
for arg in "$@"; do
  if [[ "$arg" =~ ^[0-9]+$ ]] && [ "$arg" -ge 0 ] && [ "$arg" -le 100 ]; then
    quality="$arg"
  else
    files+=("$arg")
  fi
done

# Check if files are provided
if [ ${#files[@]} -eq 0 ]; then
  echo "Usage: $0 <input_files...> [quality]"
  echo "Examples: $0 *.png 80"
  echo "          $0 image1.jpg image2.jpg 90"
  echo "Quality is optional and should be between 0-100. Default is 80."
  exit 1
fi

# Function to convert a single image
convert_to_webp() {
  local input_image="$1"
  local quality="$2"

  # Get the base name of the input file without extension
  base_name=$(basename "$input_image")
  name_without_ext="${base_name%.*}"
  dir_name=$(dirname "$input_image")
  output_file="$dir_name/${name_without_ext}.webp"

  # Remove existing WebP file if it exists
  if [[ -f "$output_file" ]]; then
    rm "$output_file"
  fi

  # Convert image to WebP
  ffmpeg -i "$input_image" -quality "$quality" -preset picture -loop 0 "$output_file" -hide_banner -loglevel error
  echo "Converted: $input_image â†’ ${name_without_ext}.webp"
}

export -f convert_to_webp

# Filter out only existing files
valid_files=()
for file in "${files[@]}"; do
  if [ -f "$file" ]; then
    valid_files+=("$file")
  fi
done
if [ ${#valid_files[@]} -eq 0 ]; then
  echo "No valid files found to convert."
  exit 1
fi

echo "Converting ${#valid_files[@]} files to WebP with quality $quality..."

# Use GNU Parallel to process files
parallel convert_to_webp {} "$quality" ::: "${valid_files[@]}"

echo "Conversion complete. Converted ${#valid_files[@]} files to WebP format."
